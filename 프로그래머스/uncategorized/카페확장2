import java.util.*;
class Solution {
    public int solution(int[] menu, int[] order, int k) {
        
        int[][] wait = new int[order.length][2];
        int currentTime = 0;
        
        for (int i = 0; i < order.length; i++) {
            if (i * k > currentTime) currentTime = i * k;
            int cameAt = k * i;
            int executionTime = menu[order[i]];
            int outAt = currentTime + executionTime;
            wait[i][0] = cameAt;
            wait[i][1] = outAt;
            currentTime = outAt;
            //System.out.printf("camaeAt %d outAt %d\n", cameAt, outAt);
        }
        
        int max = 0;
        for (int i = 0; i < order.length; i++) {
            int cnt = 0;
            for (int j = i; j < order.length; j++) {
                //System.out.printf("%d > %d\n", wait[i][1] , wait[j][0]);
                if (wait[i][1] > wait[j][0]) cnt++;
            }
            max = Math.max(cnt, max);
        }
        return max;
    }
}
/**
시간 계싼해서 배열에 넣기
앞점ㅈ ㅓㅇ렬되어있으니까 순회하면서 겹치는 부분 찾기
*/
