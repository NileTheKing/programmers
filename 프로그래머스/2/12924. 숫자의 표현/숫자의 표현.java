class Solution {
    public int solution(int n) {
        int cnt = 1; // 15한개 외톨이
        
        for (int i = 2; i < n; i++) { //몇개연속 볼거냐
            for (int j = 1; j < n; j++) { //시작숫자
                double start = j;
                double end = j + i - 1; //1부터2까지 3까지 4까지 등등
                double sum = (double)((start + end) / 2 * i);
                if (sum == n) {
                    cnt++;
                    //System.out.printf("starting from %d, %d consecutive works\n", j, i);
                }
                else if (sum > n) break;
            }
        }
        return cnt;
    }
}
/**
자연수 연속..
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
이거 확장시키면 되는 거 아닌가?
음 일단 n/2를 넘어간느 경우는 불가능.
16기준 8만해도 89하면 넘어감. 그러면 n/2 + 1까지만 확인. 그다음에 그숫자 하나 들어가는거 +1해주면 됨.
1 2 3 4 5 6 7 8까지만 확인해주고 15되니까 하나 더해줌

가능한 총 경우의수는
    1개연속 <당연히 없음
    2개연속
    3개연속
    4개연속
    5개연속
    6개연속
    7개연속
    8개연속
    
    /2개연속 3개연속 4개연속 되는지 확인
    //2개연속이라면 1,2 / 2,3/ 3,4/ 4,5 / 5,6/ 6,7/ 7,8  >>7개 확인 3 5 7 9
    //3개 연속이라면 1,2,3/ 2,3,4/ 3,4,5/ 4,5,6 .... 678/789 >> 7개 확인 6 9 12 15 ..
    //4개연속은 1234/2345/3456 ... 78910 -> 7개확인 10 14 18
    //5개 연속은 12345 / 23456 ...  
    //i부터 연속갯수(j=2,3,4..)만큼 되는지 확인
               
    15가있으면 7까지만 살펴본다 이거고.
    7까지 살펴본다는 거는 1부터 시작하는 숫자부터 7부터시작하는 숫자까지 본다
    그리고 1부터 보면서 몇개 연속로 보냐 이거지
    근데 그러면 몇개연속으로 되는지 확인 먼저하면서 시작하
    12 23 34 45 56 78
    123 234 345 456 789
    1234 2345 3456 ...
    12345 23456
    123456 234567
    1234567 2345678
    12345678..
    */